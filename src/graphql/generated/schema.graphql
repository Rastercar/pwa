#
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
#

"""The access level to the tracked dashboard"""
type AccessLevelModel {
  description: String!
  id: Int!
  name: String!
  permissions: [PERMISSION!]!
}

"""JSON Web Token"""
type JwtModel {
  type: String!
  value: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  token: JwtModel!
  user: UserOrMasterUser!
}

enum MASTER_PERMISSION {
  EDIT_OTHER_USERS
}

"""The access level to the tracker dashboard"""
type MasterAccessLevelModel {
  description: String!
  id: Int!
  name: String!
  permissions: [MASTER_PERMISSION!]!
}

"""master user (a user with access to the main panel)"""
type MasterUserModel {
  accessLevel: AccessLevelModel!
  email: String!
  emailVerified: Boolean!
  id: Int!
  masterAccessLevel: MasterAccessLevelModel!
  username: String!
}

type Mutation {
  login(credentials: LoginInput!): LoginResponse!
  loginWithToken(token: String!): LoginResponse!
  register(user: RegisterUserDTO!): LoginResponse!
  updateMyProfile(profileData: UpdateUserDTO!): UserModel!
}

type OffsetPageInfo {
  """If you can increase the offset to fetch next records"""
  hasMore: Boolean!

  """If you can decrease the offset to fetch previous records"""
  hasPrevious: Boolean!

  """Quantity of all avaliable records"""
  total: Int!
}

type OffsetPaginatedVehicle {
  nodes: [VehicleModel!]
  pageInfo: OffsetPageInfo!
}

"""organization"""
type OrganizationModel {
  billingEmail: String!
  billingEmailVerified: Boolean!
  blocked: Boolean!
  id: Int!
  name: String!
  trackers: [TrackerModel!]!
  users(
    """Return the elements in the list after this cursor"""
    after: Int = 0

    """Return the elements in the list before this cursor"""
    before: Int!

    """Return the first N elements from the list"""
    first: Int = 10

    """Return the last N elements from the list"""
    last: Int = 10
  ): PaginatedUser!
  vehicles(limit: Int = 10, offset: Int = 0): OffsetPaginatedVehicle!
}

enum PERMISSION {
  EDIT_OTHER_USERS
}

type PageInfo {
  """When paginating forwards, the cursor to continue"""
  endCursor: String!

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue"""
  startCursor: String!
}

type PaginatedUser {
  edges: [UserModelConnection!]
  nodes: [UserModel!]
  pageInfo: PageInfo!
}

type Query {
  isEmailInUse(email: String!): Boolean!
  me: UserOrMasterUser!
  organization(id: Int!): OrganizationModel
  unregisteredUser(uuid: String!): UnregisteredUserModel
  user(id: Int!): UserModel

  """The vehicles that belong to the request user organization"""
  vehicles(
    """
    It the records should be sorted in descending order by the field on "orderBy"
    """
    descending: Boolean = false
    limit: Int = 10
    offset: Int = 0

    """The field to order results by. example: name, id"""
    orderBy: String
    search: String
  ): OffsetPaginatedVehicle!
}

input RegisterUserDTO {
  email: String!
  password: String!

  """
  UUID of the unregistered user this registration refers to, once finished the referred unregistered user will be deleted, this is also used to determine wheter the user being registered uses oauth for authentication
  """
  refersToUnregisteredUser: String
  username: String!
}

"""sim card"""
type SimCardModel {
  apnAddress: String!
  apnPassword: String!
  apnUser: String!
  id: Int!
  organization: SimpleOrganizationModel!
  phoneNumber: String!
  ssn: String!
  tracker: TrackerModel
}

"""organization but without nested fields"""
type SimpleOrganizationModel {
  billingEmail: String!
  billingEmailVerified: Boolean!
  blocked: Boolean!
  id: Int!
  name: String!
}

"""tracker"""
type TrackerModel {
  id: Int!
  model: String!
  organization: SimpleOrganizationModel!
  simCards: [SimCardModel!]!
  vehicle: VehicleModel!
}

"""unregistered user"""
type UnregisteredUserModel {
  email: String!
  emailVerified: Boolean!
  username: String
  uuid: String!
}

input UpdateUserDTO {
  email: String

  """
  The user old password, required when changing the user password with the password prop
  """
  oldPassword: String
  password: String
  removeGoogleProfileLink: Boolean
  username: String
}

"""user"""
type UserModel {
  accessLevel: AccessLevelModel!
  email: String!
  emailVerified: Boolean!
  googleProfileId: String
  id: Int!
  organization: SimpleOrganizationModel!
  username: String!
}

type UserModelConnection {
  cursor: String!
  node: UserModel!
}

union UserOrMasterUser = MasterUserModel | UserModel

"""vehicle"""
type VehicleModel {
  brand: String
  chassisNumber: String
  color: String
  fabricationYear: Float
  id: Int!
  model: String
  modelYear: Float
  organization: SimpleOrganizationModel!
  plate: String!
  renavam: String
  trackers: [TrackerModel!]!
}