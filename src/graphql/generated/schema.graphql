#
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
#

"""The access level to the tracked dashboard"""
type AccessLevelModel {
  description: String!
  id: Int!
  name: String!
  permissions: [PERMISSION!]!
}

input CreateVehicleDTO {
  brand: String
  chassisNumber: String
  color: String
  fabricationYear: Float
  model: String
  modelYear: Float
  plate: String!
  renavam: String
}

"""JSON Web Token"""
type JwtModel {
  type: String!
  value: String!
}

type LatLng {
  lat: Float!
  lng: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  token: JwtModel!
  user: UserOrMasterUser!
}

enum MASTER_PERMISSION {
  EDIT_OTHER_USERS
}

"""The access level to the tracker dashboard"""
type MasterAccessLevelModel {
  description: String!
  id: Int!
  name: String!
  permissions: [MASTER_PERMISSION!]!
}

"""master user (a user with access to the main panel)"""
type MasterUserModel {
  accessLevel: AccessLevelModel!
  email: String!
  emailVerified: Boolean!
  id: Int!
  masterAccessLevel: MasterAccessLevelModel!
  username: String!
}

type Mutation {
  createVehicle(data: CreateVehicleDTO!, photo: Upload): VehicleModel!

  """Creates new trackers and associate them with a existing vehicle"""
  installTrackersOnVehicle(data: UpdateVehicleDTO!, id: Int!): VehicleModel!
  login(credentials: LoginInput!): LoginResponse!
  loginWithToken(token: String!): LoginResponse!
  register(user: RegisterUserDTO!): LoginResponse!

  """Sets the trackers associated with the vehicle"""
  setVehicleTrackers(id: Int!, trackerIds: [Int!]!): VehicleModel!
  updateMyProfile(profileData: UpdateUserDTO!): UserModel!
  updateVehicle(data: UpdateVehicleDTO!, id: Int!, photo: Upload): VehicleModel!
}

type OffsetPageInfo {
  """If you can increase the offset to fetch next records"""
  hasMore: Boolean!

  """If you can decrease the offset to fetch previous records"""
  hasPrevious: Boolean!

  """Quantity of all avaliable records"""
  total: Int!
}

type OffsetPaginatedSimCard {
  nodes: [SimCardModel!]
  pageInfo: OffsetPageInfo!
}

type OffsetPaginatedTracker {
  nodes: [TrackerModel!]
  pageInfo: OffsetPageInfo!
}

type OffsetPaginatedUser {
  nodes: [UserModel!]
  pageInfo: OffsetPageInfo!
}

type OffsetPaginatedVehicle {
  nodes: [VehicleModel!]
  pageInfo: OffsetPageInfo!
}

"""organization"""
type OrganizationModel {
  billingEmail: String!
  billingEmailVerified: Boolean!
  blocked: Boolean!
  id: Int!
  name: String!
  simCards(limit: Int = 10, offset: Int = 0): OffsetPaginatedSimCard!
  trackers(limit: Int = 10, offset: Int = 0): OffsetPaginatedTracker!
  users(limit: Int = 10, offset: Int = 0): OffsetPaginatedUser!
  vehicles(
    """
    If the records should be sorted in descending order by the field on "orderBy"
    """
    descending: Boolean = false
    limit: Int = 10
    offset: Int = 0

    """The field to order results by. example: name, id"""
    orderBy: String
    search: String
  ): OffsetPaginatedVehicle!
}

enum PERMISSION {
  CREATE_VEHICLE
  DELETE_VEHICLE
  EDIT_OTHER_USERS
  UPDATE_VEHICLE
}

type Query {
  """
  All trackers that can recieve positions (trackers that have one or more sim cards)
  """
  activeTrackers: [TrackerModel!]!
  isEmailInUse(email: String!): Boolean!
  me: UserOrMasterUser!
  organization(id: Int!): OrganizationModel

  """Sim cards that belong to the request user organization"""
  simCards(
    """
    If the records should be sorted in descending order by the field on "orderBy"
    """
    descending: Boolean = false

    """If the sim card is not associated/installed on a tracker"""
    installedOnTracker: Boolean = null
    limit: Int = 10
    offset: Int = 0

    """The field to order results by. example: name, id"""
    orderBy: String
    search: String
  ): OffsetPaginatedSimCard!

  """Trackers that belong to the request user organization"""
  trackers(
    """
    If the records should be sorted in descending order by the field on "orderBy"
    """
    descending: Boolean = false

    """If the tracker is not associated/installed on a vehicle"""
    installedOnVehicle: Boolean = null
    limit: Int = 10
    offset: Int = 0

    """The field to order results by. example: name, id"""
    orderBy: String
    search: String
  ): OffsetPaginatedTracker!
  unregisteredUser(uuid: String!): UnregisteredUserModel
  user(id: Int!): UserModel
  vehicle(id: Int!): VehicleModel

  """Vehicles that belong to the request user organization"""
  vehicles(
    """
    If the records should be sorted in descending order by the field on "orderBy"
    """
    descending: Boolean = false
    limit: Int = 10
    offset: Int = 0

    """The field to order results by. example: name, id"""
    orderBy: String
    search: String
  ): OffsetPaginatedVehicle!
}

input RegisterUserDTO {
  email: String!
  password: String!

  """
  UUID of the unregistered user this registration refers to, once finished the referred unregistered user will be deleted, this is also used to determine wheter the user being registered uses oauth for authentication
  """
  refersToUnregisteredUser: String
  username: String!
}

"""sim card"""
type SimCardModel {
  apnAddress: String!
  apnPassword: String!
  apnUser: String!
  id: Int!
  organization: SimpleOrganizationModel!
  phoneNumber: String!
  ssn: String!
  tracker: TrackerModel
}

"""organization but without nested fields"""
type SimpleOrganizationModel {
  billingEmail: String!
  billingEmailVerified: Boolean!
  blocked: Boolean!
  id: Int!
  name: String!
}

type Subscription {
  listenToTracker(ids: [Int!] = []): TrackerModel!
}

"""tracker"""
type TrackerModel {
  id: Int!

  """A human readable identifier, ex: MXT013-BOX-33, Tracker 123 lote 2"""
  identifier: String
  lastPosition: LatLng
  model: String!
  organization: SimpleOrganizationModel!
  simCards: [SimCardModel!]!
  vehicle: VehicleModel!
}

"""unregistered user"""
type UnregisteredUserModel {
  email: String!
  emailVerified: Boolean!
  username: String
  uuid: String!
}

input UpdateUserDTO {
  email: String

  """
  The user old password, required when changing the user password with the password prop
  """
  oldPassword: String
  password: String
  removeGoogleProfileLink: Boolean
  username: String
}

input UpdateVehicleDTO {
  brand: String
  chassisNumber: String
  color: String
  fabricationYear: Float
  model: String
  modelYear: Float
  plate: String
  removePhoto: Boolean
  renavam: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""user"""
type UserModel {
  accessLevel: AccessLevelModel!
  email: String!
  emailVerified: Boolean!
  googleProfileId: String
  id: Int!
  organization: SimpleOrganizationModel!
  username: String!
}

union UserOrMasterUser = MasterUserModel | UserModel

"""vehicle"""
type VehicleModel {
  brand: String
  chassisNumber: String
  color: String
  fabricationYear: Float
  id: Int!
  model: String
  modelYear: Float
  organization: SimpleOrganizationModel!
  photo: String
  plate: String!
  renavam: String
  trackers: [TrackerModel!]!
}